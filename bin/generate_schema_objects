#!/usr/bin/env php
<?php

$autoLoadFiles = [__DIR__ . '/../vendor/autoload.php', __DIR__ . '/../../../autoload.php'];

// Require autoload.php depending on environment
$autoLoadFound = false;
foreach ($autoLoadFiles as $autoLoadFile) {
	if (file_exists($autoLoadFile)) {
		require $autoLoadFile;
		$autoLoadFound = true;
	}
}
// Exit if autoload.php is not required
if (!$autoLoadFound) {
	throw new RuntimeException('Could not find vendor/autoload.php');
}

use GraphQL\Client;
use GraphQL\SchemaGenerator\SchemaClassGenerator;

$options = getopt('', ['endpoint::', 'authname::', 'authvalue::', 'writedir::', 'help::']);

if ( isset( $options['help'] ) ) {
	echo "Generate GraphQL schema objects via the introspection feature of GraphQL APIs. \n\n";
	echo "Usage: php vendor/bin/generate_schema_objects [args...] \n\n";
	echo "If arguments are not passed, an interactive prompt will request values\n\n";
	echo "--endpoint  <uri> The GraphQL endpoint URI \n";
	echo "--authname  <val> The Authorization header name \n";
	echo "--authvalue <val> The Authorization header value \n";
	echo "--writedir  <val> Custom classes writing dir \n";
	echo "--help            Generates this help output \n";

	exit;
}

$endpointUrl = empty( $options['endpoint'] ) ? readline('GraphlQL endpoint URL: ') : $options['endpoint'];

$authHeaders    = [];
$authHeaderName = isset( $options['authname'] ) ? $options['authname'] : readline('Authorization header name: ');
if (!empty($authHeaderName)) {
    $authHeaderValue = empty( $options['authvalue'] ) ? readline('Authorization header value: ') : $options['authvalue'];
    $authHeaders = [$authHeaderName => $authHeaderValue];
}

$customWriteDir = isset( $options['writedir'] ) ? $options['writedir'] : readline('Custom classes writing dir (optional): ');
if (empty($customWriteDir)) $customWriteDir = '';

$client  = new Client($endpointUrl, $authHeaders);
$scanner = new SchemaClassGenerator($client, $customWriteDir);

print "-------------------------------------------\n";
print "Generating schema objects from schema types\n";
print "-------------------------------------------\n";

$scanner->generateRootQueryObject();

print "-------------------------------------------\n";
print "Schema objects generation complete\n";
print "-------------------------------------------\n";
